{"ast":null,"code":"const fetchFoodData = async (allergen, page, pageSize) => {\n  const url = `https://world.openfoodfacts.org/api/v2/search?allergens_tags=${allergen}&fields=product_name,brands,quantity,ingredients_text,image_url,allergens_tags&page=${page}&page_size=${pageSize}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return data.products;\n  } catch (error) {\n    throw error;\n  }\n};\nconst loadAllProducts = async () => {\n  try {\n    // Laden von Produkten mit Milch\n    const productsWithMilkData = await fetchFoodData('milk', 1, 50); // Beispiel: Seite 1, 50 Produkte pro Seite\n\n    // Laden von Produkten ohne Milch\n    const productsWithoutMilkData = await fetchFoodData('-milk', 1, 50); // Beispiel: Seite 1, 50 Produkte pro Seite\n\n    return {\n      productsWithMilk: productsWithMilkData,\n      productsWithoutMilk: productsWithoutMilkData\n    };\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    return {\n      error: error.message\n    };\n  }\n};\nexport default loadAllProducts;","map":{"version":3,"names":["fetchFoodData","allergen","page","pageSize","url","response","fetch","ok","Error","data","json","products","error","loadAllProducts","productsWithMilkData","productsWithoutMilkData","productsWithMilk","productsWithoutMilk","console","message"],"sources":["/Users/janine/Desktop/Coding Workshops & Hackathons/Hackathon Chromik/no_shit_day/frontend/src/utils/DataFetch.jsx"],"sourcesContent":["const fetchFoodData = async (allergen, page, pageSize) => {\n    const url = `https://world.openfoodfacts.org/api/v2/search?allergens_tags=${allergen}&fields=product_name,brands,quantity,ingredients_text,image_url,allergens_tags&page=${page}&page_size=${pageSize}`;\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      return data.products;\n    } catch (error) {\n      throw error;\n    }\n  };\n  \n  const loadAllProducts = async () => {\n    try {\n      // Laden von Produkten mit Milch\n      const productsWithMilkData = await fetchFoodData('milk', 1, 50); // Beispiel: Seite 1, 50 Produkte pro Seite\n  \n      // Laden von Produkten ohne Milch\n      const productsWithoutMilkData = await fetchFoodData('-milk', 1, 50); // Beispiel: Seite 1, 50 Produkte pro Seite\n  \n      return {\n        productsWithMilk: productsWithMilkData,\n        productsWithoutMilk: productsWithoutMilkData,\n      };\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      return { error: error.message };\n    }\n  };\n  \n  export default loadAllProducts;\n  "],"mappings":"AAAA,MAAMA,aAAa,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,IAAI,EAAEC,QAAQ,KAAK;EACtD,MAAMC,GAAG,GAAG,gEAAgEH,QAAQ,uFAAuFC,IAAI,cAAcC,QAAQ,EAAE;EACvM,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,QAAQ;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF;IACA,MAAMC,oBAAoB,GAAG,MAAMd,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;IAEjE;IACA,MAAMe,uBAAuB,GAAG,MAAMf,aAAa,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;IAErE,OAAO;MACLgB,gBAAgB,EAAEF,oBAAoB;MACtCG,mBAAmB,EAAEF;IACvB,CAAC;EACH,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdM,OAAO,CAACN,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MAAEA,KAAK,EAAEA,KAAK,CAACO;IAAQ,CAAC;EACjC;AACF,CAAC;AAED,eAAeN,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}